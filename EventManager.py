from inspect import getargspec

debug = 5
def Debug( msg, lvl = 1 ):
	if lvl <= debug:
		print msg

#------------------------------------------------------------------------------
class Event(object):
	"""this is a superclass for any events that might be generated by an
	object and sent to the EventManager"""
	def __init__(self):
		self.name = "Generic Event"
	def __str__(self):
		return self.name

class TickEvent(Event):
	"""this event is triggered on each game tick"""
	def __init__(self, time, dtime = 0):
		self.name = "CPU Tick Event"
		self.time = time
		self.dtime = dtime
	def __str__(self):
		return "%s: at %d (delta %s)" % (self.name, self.time, self.dtime)

class QuitEvent(Event):
	"""this event is triggered when the user chooses to quit the game"""
	def __init__(self):
		self.name = "Program Quit Event"

class GameStartedEvent(Event):
	"""this event is triggered when a new game is started"""
	def __init__(self, game):
		self.name = "Game Started Event"
		self.game = game
	def __str__(self):
		return "%s for game %s" % (self.name, self.game)

class NextBattleEvent(Event):
	"""This event is triggered when the player requests a new battle"""
	def __init__(self):
		self.name = "Next Battle Event"
	def __str__(self):
		return self.name

#------------------------------------------------------------------------------
class SpawnEvent(Event):
	"""Superclass for all events that indicate spawning of an actor"""
	def __init__(self, evID):
		self.name = "Spawn Event"
		self.evID = evID
	def __str__(self):
		return "%s for Actor %s" % (self.name, self.evID)

class SpawnHeroEvent(SpawnEvent):
	"""this event is triggered when a hero spawns"""
	def __init__(self, evID):
		SpawnEvent.__init__(self, evID)
		self.name = "Spawn Hero Event"

class SpawnEnemyEvent(SpawnEvent):
	"""this event is triggered when an enemy spawns"""
	def __init__(self, evID):
		SpawnEvent.__init__(self, evID)
		self.name = "Spawn Enemy Event"

#------------------------------------------------------------------------------
class AddProblemCategoryEvent(Event):
	def __init__(self, category):
		self.category = category
		self.name = "Add Problem Category Event"
	def __str__(self):
		return "%s for category %s" % (self.name, self.category)

class AddProblemTypeEvent(Event):
	def __init__(self, type):
		self.type = type
		self.name = "Add Problem Type Event"
	def __str__(self):
		return "%s for type %s" % (self.name, self.type)

class AddProblemLevelEvent(Event):
	def __init__(self, level):
		self.level = level
		self.name = "Add Problem Level Event"
	def __str__(self):
		return "%s for level %s" % (self.name, self.level)

class AddProblemEvent(Event):
	def __init__(self, problem):
		self.problem = problem
		self.name = "Add Problem Event"
	def __str__(self):
		return "%s for problem %s"
	

#------------------------------------------------------------------------------
class RequestAttackEvent(Event):
	"""this event is triggered when the player initiates an attack"""
	def __init__(self):
		self.name = "Request Attack Event"

class RequestSolutionEvent(Event):
	"""this event is triggered when the system is ready for the solution to an attack"""
	def __init__(self, problem, endTime):
		self.name = "Request Solution Event"
		self.problem = problem
		self.endTime = endTime
	def __str__(self):
		return "%s problem %s with end time %s" % (self.name, self.problem, self.endTime)

class SolutionUpdateEvent(Event):
	"""this event is triggered with each keypress as the player types the solution for an attack"""
	def __init__(self, solution):
		self.name = "Solution Update Event"
		self.solution = solution
	def __str__(self):
		return "%s for solution %s" % (self.name, self.solution)

class SolveEvent(Event):
	"""this event is triggered when the player submits a solution for an attack"""
	def __init__(self, solution):
		self.name = "Solve Event"
		self.solution = solution
	def __str__(self):
		return "%s for solution %s" % (self.name, self.solution)

#------------------------------------------------------------------------------
class GameStateChangeEvent(Event):
	"""Superclass for all events that indicate the change of state of the game"""
	def __init__(self):
		self.name = "Game State Change Event"
	def __str__(self):
		return self.name

class GameOverEvent(GameStateChangeEvent):
	def __init__(self):
		self.name = "Game Over Event"

class VictoryEvent(GameStateChangeEvent):
	def __init__(self):
		self.name = "Victory Event"

#------------------------------------------------------------------------------
class ActorStateChangeEvent(Event):
	"""Superclass for all events that indicate the change of state of an actor
		subject: acting party"""
	def __init__(self, subject):
		self.name = "Actor State Change Event"
		self.subject = subject
	def __str__(self):
		return "%s for Actor %s" % (self.name, self.subject)

class WaitEvent(ActorStateChangeEvent):
	"""Actor is currently not involved in an event"""
	def __init__(self, subject):
		ActorStateChangeEvent.__init__(self, subject)
		self.name = "Wait Event"

class AttackEvent(ActorStateChangeEvent):
	"""Actor is currently attacking"""
	def __init__(self, subject, object, damage):
		ActorStateChangeEvent.__init__(self, subject)
		self.name = "Attack Event"
		self.object = object
		self.damage = damage
	def __str__(self):
		return "%s: Actor %s attacked actor %s with %s damage" % \
				(self.name, self.subject, self.object, self.damage)

class DefendEvent(ActorStateChangeEvent):
	"""Actor is currently defending"""
	def __init__(self, subject):
		ActorStateChangeEvent.__init__(self, subject)
		self.name = "Defend Event"

class HurtEvent(ActorStateChangeEvent):
	"""Actor is currently being hurt"""
	def __init__(self, subject, newHealth):
		ActorStateChangeEvent.__init__(self, subject)
		self.name = "Hurt Event"
		self.newHealth = newHealth
	def __str__(self):
		return "%s: Actor was hurt %s with resulting health of %s" % (self.name, self.subject, self.newHealth)

class DieEvent(ActorStateChangeEvent):
	"""Actor is currently dead"""
	def __init__(self, subject):
		ActorStateChangeEvent.__init__(self, subject)
		self.name = "Die Event"

#------------------------------------------------------------------------------
class OpenMenuEvent(Event):
	"""..."""
	def __init__(self, title, choices):
		Event.__init__(self)
		self.name = "Open Menu event"
		self.title = title
		self.choices = choices
	def __str__(self):
		return "%s: opening menu %s" % (self.name, self.title)

#------------------------------------------------------------------------------
class Singleton(object):
	"""Singleton as defined here: http://snippets.dzone.com/posts/show/651"""
	def __new__(type):
		 if not '_the_instance' in type.__dict__:
		 	type._the_instance = object.__new__(type)
		 return type._the_instance

class Borg(object):
	"""borg design pattern: http://code.activestate.com/recipes/66531/"""
	__shared_state = {}
	def __init__(self):
		self.__dict__ = self.__shared_state
		if not hasattr(self, 'initialized'):
			self.init()
			self.initialized = True
	def init(self):
		pass

class SingletonType(type):
	"""Singleton metaclass as defined here: http://timka.org/programming/2008/12/17/singleton-in-python/"""
	def __call__(cls):
		if getattr(cls, '__instance__', None) is None:
			instance = cls.__new__(cls)
			instance.__init__()
			cls.__instance__ = instance
		return cls.__instance__


class EventManager(object):
	"""this object is responsible for coordinating most communication
	between the Model, View, and Controller.
	"""
	__metaclass__ = SingletonType
	
	def __init__(self):
		from weakref import WeakKeyDictionary
		self.listeners = WeakKeyDictionary()
		self.eventQueue= []

	#todo: listeners should be able to only subscribe to a subset of events (e.g. only pertaining to a specific actor) 
	def RegisterListener( self, listener ):
		"""Add given listener to list that will recieve event notifications"""
		#make sure the Notify method exists, and has the right params (enforced duck typing)
		if not hasattr(listener, 'Notify') \
			or not callable(listener.Notify) \
			or len(getargspec(listener.Notify)[0]) < 2 \
			or not getargspec(listener.Notify)[0][1] == 'event':
			raise TypeError("listener '%s' must define method 'Notify(self, event)'" % (listener))
		self.listeners[ listener ] = 1

	def UnregisterListener( self, listener ):
		"""Remove given listener from list that will recieve event notifications
			fail silently if the listener doesn't exist"""
		if listener in self.listeners.keys():
			del self.listeners[ listener ]

	def Notify( self, event ):
		"""Inform all listeners that a given event has occurred"""
		if not isinstance(event, TickEvent): Debug( "     Message: " + str(event) )
		for listener in self.listeners.keys():
			#If the weakref has died, remove it and continue
			#through the list
			if listener is None:
				del self.listeners[ listener ]
				continue
			listener.Notify( event )